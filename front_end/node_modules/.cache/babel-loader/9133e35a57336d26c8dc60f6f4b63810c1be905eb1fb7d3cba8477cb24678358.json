{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/demos/nft_loan/front_end/src/components/yourWallet/StakeForm.tsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport Button from '@mui/material/Button';\nimport Input from '@mui/material/Input';\nimport { useState } from \"react\";\nimport { useStakeTokens } from \"../../hooks/useStakeTokens\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StakeForm = _ref => {\n  _s();\n  let {\n    token\n  } = _ref;\n  const {\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const [amount, setAmount] = useState(0);\n  const handleInputChange = event => {\n    const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value);\n    setAmount(newAmount);\n    console.log(newAmount);\n  };\n  const {\n    approve,\n    approveErc721State\n  } = useStakeTokens(tokenAddress);\n  const handleStakeSubmit = () => {\n    // const amountAsWei = utils.parseEther(amount.toString())\n    const index = amount.toString();\n    return approve(index);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Input, {\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      onClick: handleStakeSubmit,\n      color: \"primary\",\n      size: \"large\",\n      children: \"Stake!!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n_s(StakeForm, \"mhSdnD6lo8cDxXSlH7zatikBiLY=\", false, function () {\n  return [useEthers, useTokenBalance, useStakeTokens];\n});\n_c = StakeForm;\nvar _c;\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"names":["React","useEthers","useTokenBalance","formatUnits","Button","Input","useState","useStakeTokens","StakeForm","token","address","tokenAddress","name","account","tokenBalance","formattedTokenBalance","parseFloat","amount","setAmount","handleInputChange","event","newAmount","target","value","Number","console","log","approve","approveErc721State","handleStakeSubmit","index","toString"],"sources":["/Users/apple/Documents/demos/nft_loan/front_end/src/components/yourWallet/StakeForm.tsx"],"sourcesContent":["import React from \"react\"\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"ethers/lib/utils\"\nimport Button from '@mui/material/Button'\nimport Input from '@mui/material/Input'\nimport { useState } from \"react\"\nimport { useStakeTokens } from \"../../hooks/useStakeTokens\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({ token }: StakeFormProps) => {\n    const { address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const { approve, approveErc721State } = useStakeTokens(tokenAddress)\n\n    const handleStakeSubmit = () => {\n        // const amountAsWei = utils.parseEther(amount.toString())\n        const index = amount.toString()\n        return approve(index)\n    }\n    return (\n        <>\n            <Input onChange={handleInputChange} />\n            <Button\n                onClick={handleStakeSubmit}\n                color=\"primary\"\n                size=\"large\">\n                Stake!!\n            </Button>\n        </>\n    )\n\n\n}"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,SAAS,EAAEC,eAAe,QAAQ,eAAe;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,sBAAsB;AACzC,OAAOC,KAAK,MAAM,qBAAqB;AACvC,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,cAAc,QAAQ,4BAA4B;AAAA;AAAA;AAM3D,OAAO,MAAMC,SAAS,GAAG,QAA+B;EAAA;EAAA,IAA9B;IAAEC;EAAsB,CAAC;EAC/C,MAAM;IAAEC,OAAO,EAAEC,YAAY;IAAEC;EAAK,CAAC,GAAGH,KAAK;EAC7C,MAAM;IAAEI;EAAQ,CAAC,GAAGZ,SAAS,EAAE;EAC/B,MAAMa,YAAY,GAAGZ,eAAe,CAACS,YAAY,EAAEE,OAAO,CAAC;EAC3D,MAAME,qBAA6B,GAAGD,YAAY,GAAGE,UAAU,CAACb,WAAW,CAACW,YAAY,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC;EAElG,MAAM,CAACG,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAA2C,CAAC,CAAC;EACjF,MAAMa,iBAAiB,GAAIC,KAA0C,IAAK;IACtE,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,KAAK,EAAE,GAAG,EAAE,GAAGC,MAAM,CAACJ,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC;IAC7EL,SAAS,CAACG,SAAS,CAAC;IACpBI,OAAO,CAACC,GAAG,CAACL,SAAS,CAAC;EAC1B,CAAC;EAED,MAAM;IAAEM,OAAO;IAAEC;EAAmB,CAAC,GAAGrB,cAAc,CAACI,YAAY,CAAC;EAEpE,MAAMkB,iBAAiB,GAAG,MAAM;IAC5B;IACA,MAAMC,KAAK,GAAGb,MAAM,CAACc,QAAQ,EAAE;IAC/B,OAAOJ,OAAO,CAACG,KAAK,CAAC;EACzB,CAAC;EACD,oBACI;IAAA,wBACI,QAAC,KAAK;MAAC,QAAQ,EAAEX;IAAkB;MAAA;MAAA;MAAA;IAAA,QAAG,eACtC,QAAC,MAAM;MACH,OAAO,EAAEU,iBAAkB;MAC3B,KAAK,EAAC,SAAS;MACf,IAAI,EAAC,OAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAEP;EAAA,gBACV;AAIX,CAAC;AAAA,GAjCYrB,SAAS;EAAA,QAEEP,SAAS,EACRC,eAAe,EAUIK,cAAc;AAAA;AAAA,KAb7CC,SAAS;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}