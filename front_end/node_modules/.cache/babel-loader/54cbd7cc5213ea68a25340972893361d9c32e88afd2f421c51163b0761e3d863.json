{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/demos/nft_loan/front_end/src/components/Main.tsx\",\n  _s = $RefreshSig$();\nimport { useEthers } from \"@usedapp/core\";\nimport helperConfig from \"../helper-config.json\";\nimport networkMapping from \"../chain-info/deployments/map.json\";\n//import { constants } from \"buffer\"\nimport { constants } from \"ethers\";\nimport brownieConfig from \"../brownie-config.json\";\nimport dapp from \"../dapp.png\";\nimport loat from \"../loat.png\";\nimport snft from \"../snft.png\";\nimport { YourNftWallet } from \"./yourWallet/YourNftWallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Main = () => {\n  _s();\n  // show users operation interface: borrow eth, repay loans\n  // show allowed NFTs from the wallet\n  // get the address of staked NFT, loan token and dapp token\n  // get the loan token balance of the users wallet\n  const {\n    chainId\n  } = useEthers();\n  const networkName = chainId ? helperConfig[chainId] : \"dev\";\n  // console.log(chainId)\n  // console.log(networkName)\n  const dappTokenAddress = chainId ? networkMapping[String(chainId)][\"DappToken\"][0] : constants.AddressZero;\n  const simpleNftAddress = chainId ? networkMapping[String(chainId)][\"SimpleNFT\"][0] : constants.AddressZero;\n  const escrowAddress = chainId ? networkMapping[String(chainId)][\"Escrow\"][0] : constants.AddressZero;\n  const loanTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"loan_token\"] : constants.AddressZero;\n  const supportedTokens = [{\n    image: dapp,\n    address: dappTokenAddress,\n    name: \"DAPP\"\n  }, {\n    image: loat,\n    address: loanTokenAddress,\n    name: \"LOAT\"\n  }];\n  const supportedNfts = [{\n    image: snft,\n    address: simpleNftAddress,\n    name: \"SNFT\"\n  }];\n  return /*#__PURE__*/_jsxDEV(YourNftWallet, {\n    supportedNfts: supportedNfts\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(Main, \"+J/r3hHtDuosVBEukE1cTsA/l+8=\", false, function () {\n  return [useEthers];\n});\n_c = Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["useEthers","helperConfig","networkMapping","constants","brownieConfig","dapp","loat","snft","YourNftWallet","Main","chainId","networkName","dappTokenAddress","String","AddressZero","simpleNftAddress","escrowAddress","loanTokenAddress","supportedTokens","image","address","name","supportedNfts"],"sources":["/Users/apple/Documents/demos/nft_loan/front_end/src/components/Main.tsx"],"sourcesContent":["import { useEthers } from \"@usedapp/core\"\nimport helperConfig from \"../helper-config.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\n//import { constants } from \"buffer\"\nimport { constants } from \"ethers\"\nimport brownieConfig from \"../brownie-config.json\"\nimport dapp from \"../dapp.png\"\nimport loat from \"../loat.png\"\nimport snft from \"../snft.png\"\nimport { YourTokenWallet } from \"./yourWallet/YourTokenWallet\"\nimport { YourNftWallet } from \"./yourWallet/YourNftWallet\"\n\nexport type Token = {\n    image: string\n    address: string\n    name: string\n}\nexport type Nft = {\n    image: string\n    address: string\n    name: string\n}\nexport const Main = () => {\n    // show users operation interface: borrow eth, repay loans\n    // show allowed NFTs from the wallet\n    // get the address of staked NFT, loan token and dapp token\n    // get the loan token balance of the users wallet\n    const { chainId } = useEthers()\n    const networkName = chainId ? helperConfig[chainId] : \"dev\"\n    // console.log(chainId)\n    // console.log(networkName)\n    const dappTokenAddress = chainId ? networkMapping[String(chainId)][\"DappToken\"][0] : constants.AddressZero\n    const simpleNftAddress = chainId ? networkMapping[String(chainId)][\"SimpleNFT\"][0] : constants.AddressZero\n    const escrowAddress = chainId ? networkMapping[String(chainId)][\"Escrow\"][0] : constants.AddressZero\n    const loanTokenAddress = chainId ? brownieConfig[\"networks\"][networkName][\"loan_token\"] : constants.AddressZero\n\n    const supportedTokens: Array<Token> = [\n        {\n            image: dapp,\n            address: dappTokenAddress,\n            name: \"DAPP\"\n        },\n        {\n            image: loat,\n            address: loanTokenAddress,\n            name: \"LOAT\"\n\n        }\n    ]\n\n    const supportedNfts: Array<Nft> = [\n        {\n            image: snft,\n            address: simpleNftAddress,\n            name: \"SNFT\"\n        },\n    ]\n\n    return (\n        <YourNftWallet supportedNfts={supportedNfts}></YourNftWallet>)\n\n}"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,cAAc,MAAM,oCAAoC;AAC/D;AACA,SAASC,SAAS,QAAQ,QAAQ;AAClC,OAAOC,aAAa,MAAM,wBAAwB;AAClD,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,IAAI,MAAM,aAAa;AAC9B,OAAOC,IAAI,MAAM,aAAa;AAE9B,SAASC,aAAa,QAAQ,4BAA4B;AAAA;AAY1D,OAAO,MAAMC,IAAI,GAAG,MAAM;EAAA;EACtB;EACA;EACA;EACA;EACA,MAAM;IAAEC;EAAQ,CAAC,GAAGV,SAAS,EAAE;EAC/B,MAAMW,WAAW,GAAGD,OAAO,GAAGT,YAAY,CAACS,OAAO,CAAC,GAAG,KAAK;EAC3D;EACA;EACA,MAAME,gBAAgB,GAAGF,OAAO,GAAGR,cAAc,CAACW,MAAM,CAACH,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAGP,SAAS,CAACW,WAAW;EAC1G,MAAMC,gBAAgB,GAAGL,OAAO,GAAGR,cAAc,CAACW,MAAM,CAACH,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,GAAGP,SAAS,CAACW,WAAW;EAC1G,MAAME,aAAa,GAAGN,OAAO,GAAGR,cAAc,CAACW,MAAM,CAACH,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAGP,SAAS,CAACW,WAAW;EACpG,MAAMG,gBAAgB,GAAGP,OAAO,GAAGN,aAAa,CAAC,UAAU,CAAC,CAACO,WAAW,CAAC,CAAC,YAAY,CAAC,GAAGR,SAAS,CAACW,WAAW;EAE/G,MAAMI,eAA6B,GAAG,CAClC;IACIC,KAAK,EAAEd,IAAI;IACXe,OAAO,EAAER,gBAAgB;IACzBS,IAAI,EAAE;EACV,CAAC,EACD;IACIF,KAAK,EAAEb,IAAI;IACXc,OAAO,EAAEH,gBAAgB;IACzBI,IAAI,EAAE;EAEV,CAAC,CACJ;EAED,MAAMC,aAAyB,GAAG,CAC9B;IACIH,KAAK,EAAEZ,IAAI;IACXa,OAAO,EAAEL,gBAAgB;IACzBM,IAAI,EAAE;EACV,CAAC,CACJ;EAED,oBACI,QAAC,aAAa;IAAC,aAAa,EAAEC;EAAc;IAAA;IAAA;IAAA;EAAA,QAAiB;AAErE,CAAC;AAAA,GAvCYb,IAAI;EAAA,QAKOT,SAAS;AAAA;AAAA,KALpBS,IAAI;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}