{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/demos/nft_loan/front_end/src/components/yourWallet/WalletBalance.tsx\",\n  _s = $RefreshSig$();\nimport { useEthers, useTokenBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"ethers/lib/utils\";\nimport { BalanceMsg } from \"../../components/BalanceMsg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletBalance = _ref => {\n  _s();\n  let {\n    token\n  } = _ref;\n  const {\n    image,\n    address,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(address, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance)) : 0;\n  console.log(tokenBalance === null || tokenBalance === void 0 ? void 0 : tokenBalance.toString());\n  // return (<div>Balance is : {formattedTokenBalance}</div>)\n  return /*#__PURE__*/_jsxDEV(BalanceMsg, {\n    label: 'Your un-staked ${name} balance',\n    tokenImgSrc: image,\n    amount: formattedTokenBalance\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 9\n  }, this);\n};\n_s(WalletBalance, \"NqEQKrgyRTaT6/yyWoioelkAkU4=\", false, function () {\n  return [useEthers, useTokenBalance];\n});\n_c = WalletBalance;\nvar _c;\n$RefreshReg$(_c, \"WalletBalance\");","map":{"version":3,"names":["useEthers","useTokenBalance","formatUnits","BalanceMsg","WalletBalance","token","image","address","name","account","tokenBalance","formattedTokenBalance","parseFloat","console","log","toString"],"sources":["/Users/apple/Documents/demos/nft_loan/front_end/src/components/yourWallet/WalletBalance.tsx"],"sourcesContent":["\nimport { Token } from \"../Main\"\nimport { useEthers, useTokenBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"ethers/lib/utils\"\nimport { BalanceMsg } from \"../../components/BalanceMsg\"\nexport interface WalletBalanceProps {\n    token: Token\n}\n\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n    const { image, address, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(address, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance)) : 0\n    console.log(tokenBalance?.toString())\n    // return (<div>Balance is : {formattedTokenBalance}</div>)\n    return (\n        <BalanceMsg\n            label={'Your un-staked ${name} balance'}\n            tokenImgSrc={image}\n            amount={formattedTokenBalance}\n        />)\n\n}"],"mappings":";;AAEA,SAASA,SAAS,EAAEC,eAAe,QAAQ,eAAe;AAC1D,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,UAAU,QAAQ,6BAA6B;AAAA;AAKxD,OAAO,MAAMC,aAAa,GAAG,QAAmC;EAAA;EAAA,IAAlC;IAAEC;EAA0B,CAAC;EACvD,MAAM;IAAEC,KAAK;IAAEC,OAAO;IAAEC;EAAK,CAAC,GAAGH,KAAK;EACtC,MAAM;IAAEI;EAAQ,CAAC,GAAGT,SAAS,EAAE;EAC/B,MAAMU,YAAY,GAAGT,eAAe,CAACM,OAAO,EAAEE,OAAO,CAAC;EACtD,MAAME,qBAA6B,GAAGD,YAAY,GAAGE,UAAU,CAACV,WAAW,CAACQ,YAAY,CAAC,CAAC,GAAG,CAAC;EAC9FG,OAAO,CAACC,GAAG,CAACJ,YAAY,aAAZA,YAAY,uBAAZA,YAAY,CAAEK,QAAQ,EAAE,CAAC;EACrC;EACA,oBACI,QAAC,UAAU;IACP,KAAK,EAAE,gCAAiC;IACxC,WAAW,EAAET,KAAM;IACnB,MAAM,EAAEK;EAAsB;IAAA;IAAA;IAAA;EAAA,QAChC;AAEV,CAAC;AAAA,GAdYP,aAAa;EAAA,QAEFJ,SAAS,EACRC,eAAe;AAAA;AAAA,KAH3BG,aAAa;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}